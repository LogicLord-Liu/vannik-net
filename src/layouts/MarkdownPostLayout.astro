---
import "../styles/markdown.scss";
import ScrollToTop from "../components/ScrollToTop";

const {
  frontmatter: { title, date, author = "佚名", cover, tags = [], readingTime },
} = Astro.props;
---

<!doctype html>
<html lang="zh">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <link rel="icon" href="/public/gerrenxingxiangzhao.ico" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
  </head>
  <body>
    <article class="post-container">
      {cover && <img src={cover} alt={title} class="cover" />}

      <header class="post-header">
        <h1 class="post-title">{title}</h1>
        <div class="post-meta">
          <time>{new Date(date).toLocaleDateString()}</time>
          <span>·</span>
          <span>{author}</span>
          {
            readingTime && (
              <>
                <span>·</span>
                <span>{readingTime}</span>
              </>
            )
          }
        </div>
        {
          tags.length > 0 && (
            <div class="post-tags">
              {tags.map((tag) => (
                <span class="tag" key={tag}>
                  #{tag}
                </span>
              ))}
            </div>
          )
        }
      </header>

      <!-- Markdown 渲染区域 -->
      <section class="markdown-content">
        <slot />
      </section>
    </article>

    <script type="module">
      import mediumZoom from "medium-zoom";

      mediumZoom(".markdown-content img", {
        background: "rgba(0, 0, 0, 0.8)",
        margin: 24,
        scrollOffset: 0,
      });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const blocks = document.querySelectorAll("pre");

        blocks.forEach((block) => {
          const wrapper = document.createElement("div");
          wrapper.className = "code-block-wrapper";

          // 插入 DOM
          block.parentNode.insertBefore(wrapper, block);
          wrapper.appendChild(block);

          // 复制按钮
          const copyBtn = document.createElement("button");
          copyBtn.className = "copy-btn";
          copyBtn.innerText = "📋 Copy";
          copyBtn.addEventListener("click", async () => {
            try {
              await navigator.clipboard.writeText(block.innerText);
              copyBtn.innerText = "✅ Copied!";
              setTimeout(() => (copyBtn.innerText = "📋 Copy"), 2000);
            } catch {
              copyBtn.innerText = "❌ Error";
            }
          });

          // 折叠按钮
          const toggleBtn = document.createElement("button");
          toggleBtn.className = "toggle-btn";
          // 初始状态假设是展开状态，显示向上箭头（▲）
          toggleBtn.innerText = "▲ 折叠";

          toggleBtn.addEventListener("click", () => {
            block.classList.toggle("collapsed");

            // 判断是否折叠
            const isCollapsed = block.classList.contains("collapsed");

            // 折叠了显示向下箭头，展开了显示向上箭头
            if (isCollapsed) {
              toggleBtn.innerText = "▼ 展开";
            } else {
              toggleBtn.innerText = "▲ 折叠";
            }
          });

          wrapper.appendChild(copyBtn);
          wrapper.appendChild(toggleBtn);
        });
      });
    </script>

    <ScrollToTop client:load />
  </body>
</html>
